# build the "readme.md" file of the package
build_readme()
build_manual()
# Run once to configure package to use pkgdown
usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
?use_pkgdown()
use_github_action("pkgdown")
use_github_action("pkgdown")
usethis::use_pkgdown_github_pages()
# Run once to configure package to use pkgdown
# usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
build_home_index()
init_site()
preview_site()
preview_site()
# Run once to configure package to use pkgdown
# usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
preview_site()
# Run once to configure package to use pkgdown
# usethis::use_pkgdown()
# Run to build the website
pkgdown::build_site()
person("Mengyang", "Zheng", , "mengyang.zheng@outlook.com", role = c("aut", "cre")),
person("Mengyang", "Zheng", , "mengyang.zheng@outlook.com", role = c("aut", "cre"))
?person
build_manual()
use_news_md()
document()
check()
build_site()
build_site()
build_site()
build_news()
detach("package:pkgdown", unload = TRUE)
library(pkgdown)
build_site()
preview_site()
build()
build_manual()
library(devtools)
rename_files?
?rename_files
rename_files("wvse","vse")
rename_files("vse","wvse")
rename_files("wvse","vse.weak")
rename_files("vse","vse.weak")
rename_files("vse.test","SLmemory.test")
rename_files("SLmemory","vse")
document()
check()
check()
library(devtools)
check()
install.packages("pracma", lib="D:/Program/R/R-4.4.0/library")
check()
library(devtools)
check()
library(devtools)
library(pkgdown)
library(devtools)
library(pkgdown)
build_site()
pkgdown::build_site_github_pages()
document()
check()
build_manual()
build_manual()
rlang::last_trace()
build_news()
build_manual()
library(devtools)
library(pkgdown)
document()
build_manual()
check()
install()
set.seed(123)
x <- rnorm(1024)
vse.test(x)
?vse.test
document()
build_manual()
check()
check()
check()
document()
check()
use_news_md()
check()
library(devtools)
build_manual()
rlang::last_trace()
tinytex::install_tinytex()
tinytex::is_tinytex()
build_manual()
library(devtools)
library(pkgdown)
document()
build_manual()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
build_manual()
getwd()
setwd("./")
ls
build_manual()
rstudioapi::getActiveDocumentContext()$path
setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path)))
paste0(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path)))
setwd("")
ls
setwd("../")
ls
getwd()
build_manual()
setwd("vse4ts")
build_manual()
build_manual()
print(e)
build_manual()
?build_manual
tinytex::check_installed()
tinytex::use_tinytex()
tinytex::use_tinytex()
?build_manual
build_manual
reticulate::repl_python()
reticulate::repl_python()
1 + 1
exit()
tinytex::tlmgr_install("makeindex")
build_manual()
tinytex::tlmgr_install("makeindex")
Rd2pdf
build_manual()
library(devtools)
library(pkgdown)
document()
build_manual()
check()
install.packages(c("downlit", "evaluate"))
install.packages(c("KernSmooth", "nlme", "survival"), lib="D:/Program/R/R-4.4.0/library")
.libPaths()
.libPaths(c("C:/Users/Dream/AppData/Local/R/win-library/4.4", "D:/Program/R/R-4.4.0/library"))
.libPaths()
.libPaths(c("D:/Program/R/R-4.4.0/library"))
.libPaths()
tinytex::is_tinytex()
build_manual()
build_manual()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
build_manual_1 <- function (pkg = ".", path = NULL)
{
pkg <- as.package(pkg)
path <- path %||% path_dir(pkg$path)
name <- paste0(pkg$package, "_", pkg$version, ".pdf", collapse = " ")
tryCatch(msg <- callr::rcmd("Rd2pdf", cmdargs = c("--force",
paste0("--output=", path, "/", name), pkg$path), fail_on_status = TRUE,
stderr = "2>&1", spinner = FALSE), error = function(e) {
cat(e$stdout)
cli::cli_abort("Failed to build manual")
})
cat(msg$stdout)
invisible(msg)
}
build_manual_1()
?path_dir
build_manual_1 <- function (pkg = ".", path = NULL)
{
pkg <- as.package(pkg)
path <- path %||% fs::path_dir(pkg$path)
name <- paste0(pkg$package, "_", pkg$version, ".pdf", collapse = " ")
tryCatch(msg <- callr::rcmd("Rd2pdf", cmdargs = c("--force",
paste0("--output=", path, "/", name), pkg$path), fail_on_status = TRUE,
stderr = "2>&1", spinner = FALSE), error = function(e) {
cat(e$stdout)
cli::cli_abort("Failed to build manual")
})
cat(msg$stdout)
invisible(msg)
}
build_manual_1()
build_manual_1 <- function (pkg = ".", path = NULL)
{
pkg <- as.package(pkg)
path <- path %||% fs::path_dir(pkg$path)
name <- paste0(pkg$package, "_", pkg$version, ".pdf", collapse = " ")
tryCatch(msg <- callr::rcmd("Rd2pdf", cmdargs = c("--force",
paste0("--output=", path, "/", name), pkg$path), fail_on_status = TRUE,
stderr = "2>&1", spinner = FALSE), error = function(e) {
cat(e$stdout)
cli::cli_abort("Failed to build manual")
})
# cat(msg$stdout)
print(msg)
invisible(msg)
}
build_manual_1()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
build_manual_1 <- function (pkg = ".", path = NULL)
{
pkg <- as.package(pkg)
path <- path %||% fs::path_dir(pkg$path)
name <- paste0(pkg$package, "_", pkg$version, ".pdf", collapse = " ")
tryCatch(msg <- callr::rcmd("Rd2pdf", cmdargs = c("--force",
paste0("--output=", path, "/", name), pkg$path), fail_on_status = TRUE,
stderr = "2>&1", spinner = FALSE), error = function(e) {
# cat(e$stdout)
print(e)
cli::cli_abort("Failed to build manual")
})
cat(msg$stdout)
invisible(msg)
}
build_manual_1()
build_manual_1 <- function (pkg = ".", path = NULL)
{
pkg <- as.package(pkg)
path <- path %||% fs::path_dir(pkg$path)
name <- paste0(pkg$package, "_", pkg$version, ".pdf", collapse = " ")
tryCatch(msg <- callr::rcmd("Rd2pdf", cmdargs = c("--force",
paste0("--output=", path, "/", name), pkg$path), fail_on_status = TRUE,
stderr = "2>&1", spinner = FALSE), error = function(e) {
# cat(e$stdout)
print(e)
cli::cli_abort("Failed to build manual")
})
cat(msg$stdout)
invisible(msg)
}
build_manual_1()
library(devtools)
library(pkgdown)
build_manual_1 <- function (pkg = ".", path = NULL)
{
pkg <- as.package(pkg)
path <- path %||% fs::path_dir(pkg$path)
name <- paste0(pkg$package, "_", pkg$version, ".pdf", collapse = " ")
tryCatch(msg <- callr::rcmd("Rd2pdf", cmdargs = c("--force",
paste0("--output=", path, "/", name), pkg$path), fail_on_status = TRUE,
stderr = "2>&1", spinner = FALSE), error = function(e) {
# cat(e$stdout)
print(e)
cli::cli_abort("Failed to build manual")
})
cat(msg$stdout)
invisible(msg)
}
build_manual_1()
tools::texi2pdf()
tools::texi2pdf
build_manual()
library(devtools)
library(pkgdown)
document()
build_manual()
help(vse)
library(devtools)
library(pkgdown)
document()
document()
document()
document()
document()
document()
install()
?SLmemory.test
document()
install()
?SLmemory.test
?nlminb
document()
document()
document()
document()
set.seed(123)
x <- rnorm(1024)
Wnoise.test(x)
set.seed(123)
x <- rnorm(1024)
Wnoise.test(x)
set.seed(123)
x <- rnorm(1024)
Wnoise.test(x)
x <- rnorm(1024)
Wnoise.test(x)
x <- rnorm(1024)
Wnoise.test(x)
x <- rnorm(1024)
Wnoise.test(x)
x <- rnorm(1024)
Wnoise.test(x)
x <- rnorm(2048)
Wnoise.test(x)
x <- rnorm(2048)
Wnoise.test(x)
x <- rnorm(2048)
Wnoise.test(x)
x <- rnorm(2048)
Wnoise.test(x)
x <- rnorm(2048)
Wnoise.test(x)
x <- rnorm(2048)
Wnoise.test(x)
x <- rnorm(2048)
Wnoise.test(x)
x <- rnorm(1024)
Wnoise.test(x)
x <- rnorm(1024)
Wnoise.test(x)
plot(x)
plot(x)
x <- rnorm(1024)
Wnoise.test(x)
plot(x)
plot(x)
library(pracma)
data("brown72")
plot(brown72)
Wnoise.test(brown72)
t.test(x)
t <- t.test(x)
t
View(t)
t.test
t$statistic
t$statistic
t$statistic
t$statistic
t$statistic
tt <- t$statistic
print.Wnoise.test <- function(x){
cat("Wnoise = ", x$Wnoise, "\n")
cat("df = ", x$df, "\n")
cat("p.value = ", x$p.value, "\n")
}
install()
?Wnoise.test
Wnoise.test(x)
Wnoise.test(x)
document()
document()
library(devtools)
library(pkgdown)
document()
install()
x <- rnorm(1024)
Wnoise.test(x)
document()
document()
document()
document()
document()
Wnoise.test(x)
Wnoise.test(x)
document()
Wnoise.test(x)
document()
Wnoise.test(x)
install()
Wnoise.test(x)
library(vse4ts)
library(vse4ts, lib.loc = "D:/Program/R/R-4.4.0/library")
detach("package:vse4ts", unload = TRUE)
remove.packages("vse4ts")
remove.packages("vse4ts", lib="D:/Program/R/R-4.4.0/library")
install()
Wnoise.test(x)
install()
library(devtools)
library(pkgdown)
load_all()
x <- rnorm(1024)
Wnoise.test(x)
document()
Wnoise.test(x)
W <- Wnoise.test(x)
W
W$statistic
W$statistic['Wnooise']
W$statistic['Wnoise']
t.test(x)
load_all()
load_all()
document()
t.test(x)
Wnoise.test(x)
load_all()
Wnoise.test(x)
load_all()
Wnoise.test(x)
W <- Wnoise.test(x)
W$Wnoise
print.Wnoise.test()
?print.Wnoise.test
print.Wnoise.test?
document()
use_tidy_description()
use_tidy_support()
vse(x, type = "strong")
vse(x, type = "weak")
document()
load_all()
?vse
set.seed(1)
x <- rnorm(1024) # Generate a random time series
vse(x)
set.seed(123)
x <- rnorm(1024) # Generate a random time series
vse(x)
Wnoise.test(x)
SLmemory.test(x)
document()
print.AsIs()
?print.htest
(ptt <- power.t.test(n = 20, delta = 1))
print(ptt, digits =  4) # using less digits than default
power.t.test
power.t.test(n = 20, delta = 1)
document()
SLmemory.test(x)
SLmemory.test(x)
SLmemory.test(x)
t.test(x)
document()
load_all()
vse(x)
Wnoise.test(x)
Wnoise.test(x)
document()
Wnoise.test(x)
Wnoise.test(brown72)
library(pracma)
data("brown72")
Wnoise.test(brown72)
SLmemory.test(brown72)
xlm <- numeric(1024); xlm[1] <- 0.1     #  H = 0.43
for (i in 2:1024) xlm[i] <- 4 * xlm[i-1] * (1 - xlm[i-1])
xlm
vse(xlm)
Wnoise.test(xlm)
SLmemory.test(xlm)
SLmemory.test(brown72)
?hurstexp
vse(brown72)
vse(brown72, type = "strong")
vse(brown72, type = "s")
?brown72
document()
load_all()
?vse
Wnoise.test(xlm)
Wnoise.test(x)
document()
pkgload::dev_help('Wnoise.test')
test_example()
test_examples()
ls
check()
document()
?match.arg
load_all()
vse(x)
vse(x, type = "strong")
vse(x, type = "strong")
vse(x, type = "s")
vse(x, type = "b")
vse(x, type = "w")
check()
document()
?vse
?vse
document()
build_manual()
use_version()
build_readme()
use_readme_rmd()
use_readme_md()
Wnoise.test(brown72)
SLmemory.test(brown72)
?use_readme_md
use_readme_md()
use_readme_md()
build_readme()
check()
build_manual()
build_readme()
document()
document()
document()
document()
?vse
document()
check()
check()
document()
?hurstexp()
document()
build_readme()
check()
build_manual()
build_site()

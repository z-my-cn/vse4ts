library(devtools)
use_git()
library(devtools)
use_r('wvse')
load_all()
xgn <- rnorm(1024)                      #  H = 0.50
wvse(xgn)
wvse(xgn)
load_all()
wvse(xgn)
check()
?nlminb
check()
check()
use_mit_license()
load_all()
wvse(xgn)
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
document()
?wvse
check()
use_testthat()
use_test(wvse)
use_test("wvse")
set.seed(123)
x <- rnorm(1024)
test()
set.seed(123)
x <- rnorm(1024)
vse <- wvse(x)
set.seed(123)
x <- rnorm(1024)
vse <- wvse(x)
test()
test()
test()
use_readme_rmd()
build_readme()
check()
use_git_remote(name = "origin", url = "https://github.com/z-my-cn/vse4ts.git")
use_github()
github_pull()
devtools::install_github("z-my-cn/vse4ts")
devtools::install_github("z-my-cn/vse4ts")
devtools::install_github("z-my-cn/vse4ts")
?vse4ts
??vse4ts
devtools::install_github("z-my-cn/vse4ts")
library(vse4ts)
detach("package:vse4ts", unload = TRUE)
remove.packages("vse4ts")
library(devtools)
document()
check()
build_rmd()
build_readme()
library(devtools)
load_all()
?wvse
library(devtools)
document()
load_all()
help(wvse)
document()
help(wvse)
?nlminb
TS <- rnorm(20)
NN <- length(TS)
numeric(5)
t.test
?t.test
R<-rnorm(1000)
TS <- R
NN <- length(TS)
vartss<-function(TS,i){
NN=length(TS)
r=floor(NN/i)
cc=r*i
TS1=TS[1:cc]
TS2=matrix(TS1,i,r)
TS3=apply(TS2,2,sum)
Nadj=r*i
varTS=var(TS3)
list(a=varTS,b=Nadj)
}
R <- rnorm(1000)
N <- length(R)
vartss<-function(TS,i){
NN=length(TS)
r=floor(NN/i)
cc=r*i
TS1=TS[1:cc]
TS2=matrix(TS1,i,r)
TS3=apply(TS2,2,sum)
Nadj=r*i
varTS=var(TS3)
list(a=varTS,b=Nadj)
}
vse<-function(R, m=0.5){
TS<-R
vartss<-function(TS,i){
NN=length(TS)
r=floor(NN/i)
cc=r*i
TS1=TS[1:cc]
TS2=matrix(TS1,i,r)
TS3=apply(TS2,2,sum)
Nadj=r*i
varTS=var(TS3)
list(a=varTS,b=Nadj)
}
N=length(R)
n = floor(N^m)
varTSjj<-numeric(n)
varTS<-function(j){
vartss.array<-sapply(1:j,function(i) as.numeric(vartss(R[(1+i-1):N],j)))
varTSjj[j]<-sum(vartss.array[1,]*vartss.array[2,])/(sum(vartss.array[2,]))
}
varTSjj<-sapply(1:n,function(j) varTS(j))
ts<-list(tsn=c(1:n),tsvar=varTSjj)
rhs <- function(tsn, b0, b1) {
b0*tsn^(2*b1)
}
fn <- function(theta, x, y) {
sum((y - theta[1]*x^(2*theta[2]))^2)
}
out<-nlminb(c(1,0.5), fn, x = ts$tsn[1:n], y = ts$tsvar[1:n]/ts$tsvar[1])
vse<-out$par[2]
}
vse(R)
vse<-function(R, m=0.5){
TS<-R
vartss<-function(TS,i){
NN=length(TS)
r=floor(NN/i)
cc=r*i
TS1=TS[1:cc]
TS2=matrix(TS1,i,r)
TS3=apply(TS2,2,sum)
Nadj=r*i
varTS=var(TS3)
list(a=varTS,b=Nadj)
}
N=length(R)
n = floor(N^m)
varTSjj<-numeric(n)
varTS<-function(j){
vartss.array<-sapply(1:j,function(i) as.numeric(vartss(R[(1+i-1):N],j)))
varTSjj[j]<-sum(vartss.array[1,]*vartss.array[2,])/(sum(vartss.array[2,]))
}
varTSjj<-sapply(1:n,function(j) varTS(j))
ts<-list(tsn=c(1:n),tsvar=varTSjj)
rhs <- function(tsn, b0, b1) {
b0*tsn^(2*b1)
}
fn <- function(theta, x, y) {
sum((y - theta[1]*x^(2*theta[2]))^2)
}
out<-nlminb(c(1,0.5), fn, x = ts$tsn[1:n], y = ts$tsvar[1:n]/ts$tsvar[1])
out$par[2]
}
vse(R)
wvse(R)
#' Calculate weak variance scaling exponents
#'
#' @param R A time series vector.
#'
#' @return The weak variance scaling exponent.
#'
#' @examples
#' x <- rnorm(1024)
#' wvse(x)
#' @export
wvse <- function(R){
TS <- R
vartss <- function(TS,i){
NN=length(TS)
r=floor(NN/i)
cc=r*i
TS1=TS[1:cc]
TS2=matrix(TS1,i,r)
TS3=apply(TS2,2,sum)
Nadj=r*i
varTS=stats::var(TS3)
list(a=varTS,b=Nadj)
}
N = length(R)
n = floor(N^0.5)
varTSjj <- numeric(n)
varTS <- function(j){
vartss.array <- sapply(1:j,function(i) as.numeric(vartss(R[(1+i-1):N],j)))
varTSjj[j] <- sum(vartss.array[1,]*vartss.array[2,])/(sum(vartss.array[2,]))
}
varTSjj <- sapply(1:n,function(j) varTS(j))
ts <- list(tsn=c(1:n),tsvar=varTSjj)
rhs <- function(tsn, b0, b1) {
b0*tsn^(2*b1)
}
fn <- function(theta, x, y) {
sum((y - theta[1]*x^(2*theta[2]))^2)
}
out <- stats::nlminb(c(1,0.5), fn, x = ts$tsn[1:n], y = ts$tsvar[1:n]/ts$tsvar[1])
return(out$par[2])
}
wvse(R)
vse(R)
vse(R, m=0.4)
vse(R, m=0.1)
vse(R, m=0.2)
vse(R, m=0.3)
vse(R, m=0.4)
vse(R, m=0.5)
vse(R, m=0.6)
vse(R, m=0.7)
vse(R, m=0.8)
